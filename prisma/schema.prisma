generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id @default(cuid())
  firstName String    @db.VarChar(100)
  lastName  String    @db.VarChar(100)
  username  String    @unique @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  phone     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  role      AdminRole @default(CASHIER)
  isActive  Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @db.Timestamp(6)
  Order     Order[]
}

model Order {
  id            String         @id @default(cuid())
  totalPrice    Int            @db.Integer
  methodPayment String         @db.VarChar(255)
  status        Status         @default(UNPAYMENT)
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @db.Timestamp(6)
  userId        String
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cashierId     String
  Cashier       Admin          @relation(fields: [cashierId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ProductOrder  ProductOrder[]
}

model Product {
  id           String        @id @default(cuid())
  name         String        @db.VarChar(255)
  description  String?       @default("")
  image        String?       @default("")
  price        Int           @db.Integer
  stock        Int           @db.Integer
  category     String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime      @db.Timestamp(6)
  ProductOrder ProductOrder?
}

model ProductOrder {
  id         String  @id @default(cuid())
  orderId    String
  Order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productId  String  @unique
  Product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  totalPrice Int     @db.Integer
  quantity   Int     @db.Integer
}

model User {
  id        String   @id @default(cuid())
  fullName  String   @db.VarChar(255)
  table     Int?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  Order     Order[]
}

model DailyData {
  id              String     @id @default(cuid())
  totalSale       Int        @db.Integer
  totalPrice      Int        @db.Integer
  mostProductSale String     @db.VarChar(255)
  lessProductSale String     @db.VarChar(255)
  createdAt       DateTime   @default(now()) @db.Timestamp(6)
  updatedAt       DateTime   @db.Timestamp(6)
  weeklyDataId    String
  WeeklyData      WeeklyData @relation(fields: [weeklyDataId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model WeeklyData {
  id              String      @id @default(cuid())
  totalSale       Int         @db.Integer
  totalPrice      Int         @db.Integer
  mostProductSale String      @db.VarChar(255)
  lessProductSale String      @db.VarChar(255)
  dayMostSale     String      @db.VarChar(255)
  dayLessSale     String      @db.VarChar(255)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  updatedAt       DateTime    @db.Timestamp(6)
  monthlyDataId   String
  MonthlyData     MonthlyData @relation(fields: [monthlyDataId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  DailyData       DailyData[]
}

model MonthlyData {
  id              String       @id @default(cuid())
  totalSale       Int          @db.Integer
  totalPrice      Int          @db.Integer
  mostProductSale String       @db.VarChar(255)
  lessProductSale String       @db.VarChar(255)
  dayMostSale     String       @db.VarChar(255)
  dayLessSale     String       @db.VarChar(255)
  createdAt       DateTime     @default(now()) @db.Timestamp(6)
  updatedAt       DateTime     @db.Timestamp(6)
  WeeklyData      WeeklyData[]
}

enum AdminRole {
  ADMIN
  CASHIER
}

enum Status {
  UNPAYMENT
  IN_PROGRESS
  SUCCESS
  FAILED
  CANCEL
}
